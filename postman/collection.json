{
	"info": {
		"_postman_id": "686745c8-dc93-49e5-b433-a8def24ce4f2",
		"name": "Stronk",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "1. Queries: user, users",
					"item": [
						{
							"name": "users query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56e64bbb-553c-42d2-ade9-4ba6d1b647fc",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"users\": [",
											"                {",
											"                    \"id\": \"user_id_1\",",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"mxwvy\",",
											"                    \"email\": \"max.wavy@gmail.com\",",
											"                    \"currentProgram\": 1",
											"                },",
											"                {",
											"                    \"id\": \"user_id_2\",",
											"                    \"name\": \"jason cheung\",",
											"                    \"username\": \"kakit\",",
											"                    \"email\": \"ka.kit@gmail.com\",",
											"                    \"currentProgram\": 2",
											"                },",
											"                {",
											"                    \"id\": \"user_id_3\",",
											"                    \"name\": \"richard wei\",",
											"                    \"username\": \"chengchu\",",
											"                    \"email\": \"richard.wei@gmail.com\",",
											"                    \"currentProgram\": 3",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    users {\n        id\n        name\n        username\n        email\n        currentProgram\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    users {\n        id\n        name\n        username\n        email\n        currentProgram\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "354"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 06:51:49 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"users\": [\n            {\n                \"id\": \"user_id_1\",\n                \"name\": \"max b wavy\",\n                \"username\": \"mxwvy\",\n                \"email\": \"max.wavy@gmail.com\",\n                \"currentProgram\": null\n            },\n            {\n                \"id\": \"user_id_2\",\n                \"name\": \"jason cheung\",\n                \"username\": \"kakit\",\n                \"email\": \"ka.kit@gmail.com\",\n                \"currentProgram\": null\n            },\n            {\n                \"id\": \"user_id_3\",\n                \"name\": \"richard wei\",\n                \"username\": \"chengchu\",\n                \"email\": \"richard.wei@gmail.com\",\n                \"currentProgram\": null\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "user query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e43e8ce-8ddf-44dd-81c4-fcc7e9e373a3",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"id\": \"user_id_1\",",
											"                \"name\": \"max b wavy\",",
											"                \"username\": \"mxwvy\",",
											"                \"email\": \"max.wavy@gmail.com\",",
											"                \"currentProgram\": 1",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(id: \"user_id_1\") {\n        id\n        name\n        username\n        email\n        currentProgram\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    user(id: \"user_id_1\") {\n        id\n        name\n        username\n        email\n        currentProgram\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query by username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cc6ca62-b4c3-4dfa-9e3c-a76661c48e6b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"id\": \"user_id_3\",",
											"                \"name\": \"richard wei\",",
											"                \"username\": \"chengchu\",",
											"                \"email\": \"richard.wei@gmail.com\",",
											"                \"currentProgram\": 3",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(username: \"chengchu\") {\n        id\n        name\n        username\n        email\n        currentProgram\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "020d6efb-60e2-467d-801a-44642e71c8f5",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"id\": \"user_id_2\",",
											"                \"name\": \"jason cheung\",",
											"                \"username\": \"kakit\",",
											"                \"email\": \"ka.kit@gmail.com\",",
											"                \"currentProgram\": 2",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(email: \"ka.kit@gmail.com\") {\n        id\n        name\n        username\n        email\n        currentProgram\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query by currentProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbc50389-dcc7-4b8e-8ea4-6af3275ec05b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"id\": \"user_id_2\",",
											"                \"name\": \"jason cheung\",",
											"                \"username\": \"kakit\",",
											"                \"email\": \"ka.kit@gmail.com\",",
											"                \"currentProgram\": 2",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(currentProgram: 2) {\n        id\n        name\n        username\n        email\n        currentProgram\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query - NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0bb9941-1f50-4188-863e-3e68d56f075b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": null",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(id: \"user_id_10\") {\n        id\n        name\n        username\n        email\n        currentProgram\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createUser",
					"item": [
						{
							"name": "Create without currentProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00005bc0-3c45-4b7c-8e50-5d3e45c69aaa",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"test_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "625dc72d-fa1a-4528-aef4-930f2541d0d2",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"409 Conflict: Username, email or ID is not unique.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da057dad-99ad-4aed-a9cb-4a0af906c1a6",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83e52768-fa4a-43cd-9b58-f18cc4d2d71b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"username\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db6aa69b-0b21-49af-b07e-1fea55f0e777",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"email\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateUser",
					"item": [
						{
							"name": "Update non-existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "372021b6-3df4-4d28-9040-3ff43601efcc",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"404 Not Found: User not found.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"user_id_x\", name: \"new_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3a8cf370-9795-43b0-aeb5-4584e0502312",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ddcf2efa-f3f3-458c-8ca2-bc7014e6327f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"user_id_1\",",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"new_username\",",
											"                    \"email\": \"max.wavy@gmail.com\",",
											"                    \"currentProgram\": 1",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"user_id_1\", username: \"new_username\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "771b4599-6351-43a2-8d87-961052483912",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"user_id_1\",",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"new_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": 1",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"user_id_1\", email: \"new_email\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38b52d9a-2f9c-4725-b750-f76647709100",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"user_id_1\",",
											"                    \"name\": \"new_name\",",
											"                    \"username\": \"new_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": 1",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"user_id_1\", name: \"new_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update currentProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6831c7a7-b7f4-49c6-a943-48ab524246a9",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"user_id_1\",",
											"                    \"name\": \"new_name\",",
											"                    \"username\": \"new_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": 2",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"user_id_1\", currentProgram: 2) {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteUser",
					"item": [
						{
							"name": "Delete user that exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ae8f4f0-0b92-4f0e-8977-5f023707b0a8",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteUser\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteUser(id: \"test_id\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4be1449-c5c4-4fe5-9325-2c4460d51642",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"404 Not Found: User not found.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteUser(id: \"test_id_x\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Tests for graphQL queries and mutations for users.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6a355175-33c4-4dde-be96-e99741562c39",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0d4b39bd-cc24-49c4-86d4-de4e6719f807",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "exercise",
			"item": [
				{
					"name": "1. Queries: exercise, exercises",
					"item": [
						{
							"name": "exercises query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c3e91a4-9933-4301-b01a-51693f89d099",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercises\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"bicep curls\",",
											"                    \"description\": \"bicep curls description\"",
											"                },",
											"                {",
											"                    \"id\": \"2\",",
											"                    \"name\": \"squats\",",
											"                    \"description\": \"squats description\"",
											"                },",
											"                {",
											"                    \"id\": \"3\",",
											"                    \"name\": \"pullups\",",
											"                    \"description\": \"pullups curls description\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercises {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7061cbf4-6044-4a85-8694-efd8f20f2e2c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": {",
											"                \"id\": \"2\",",
											"                \"name\": \"squats\",",
											"                \"description\": \"squats description\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(id: 2) {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6057808d-4a11-4347-8234-298b08be9374",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": {",
											"                \"id\": \"2\",",
											"                \"name\": \"squats\",",
											"                \"description\": \"squats description\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(name: \"squats\") {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query by desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27decb15-4edd-4fc6-8461-499799d24fea",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": {",
											"                \"id\": \"2\",",
											"                \"name\": \"squats\",",
											"                \"description\": \"squats description\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(desc: \"squats description\") {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query - NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7eeb50e-ab4a-452f-9ed0-135766eae169",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": null",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(id: -1) {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createExercise",
					"item": [
						{
							"name": "Create exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3410d9b2-3d02-4a70-a628-c358d69be282",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createExercise\": {",
											"                \"exercise\": {",
											"                    \"name\": \"Ex1\",",
											"                    \"description\": \"ex1 desc\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"ex1\", desc: \"ex1 desc\") {\n        exercise {\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3f6bd8a-2c54-4447-bfae-d1b35d4f0a63",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"400 Bad Request: Name already used by another exercise\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"ex1\", desc: \"newest exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9572cd64-221f-4560-9970-3a8c60df7f7f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createExercise\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(desc: \"newest exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03f06e2f-3a52-4ee6-9825-818bfd5ab08c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createExercise\\\" argument \\\"desc\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "36e0fcd7-0b6c-4404-bce6-19aea77ddc54",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"new exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateExercise",
					"item": [
						{
							"name": "Update non-existent exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba16149c-9ed5-4bf3-be30-c1bd74bc1097",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"404 Not Found: Exercise not found.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 0) {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4b2dcd4-d245-4dcc-93c3-5d50195ec628",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateExercise\": {",
											"                \"exercise\": {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"New Exercise\",",
											"                    \"description\": \"bicep curls description\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 1, name: \"new exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "468f8288-f9b6-405c-98ef-8e278a19f180",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateExercise\": {",
											"                \"exercise\": {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"New Exercise\",",
											"                    \"description\": \"new description\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 1, desc: \"new description\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteExercise",
					"item": [
						{
							"name": "Delete existing exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd67ed10-e438-4f66-9504-a7c99072238b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteExercise\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteExercise(id: 1) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3fe6ba0-23f8-48ba-9687-e8aa15e661c7",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"404 Not Found: Exercise not found.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteExercise(id: 0) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "workout",
			"item": [
				{
					"name": "1. Queries: workout, workouts",
					"item": [
						{
							"name": "program workouts query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "140bb895-93c0-4ec9-b5bb-9be401fa62ec",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workouts\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"workout 1\",",
											"                    \"description\": \"workout 1 description\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workouts(programId: 1) {\n    id, name, description\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "workout query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "905492aa-2e78-4fdc-bc6b-37e5f8f1b459",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workout\": {",
											"                \"id\": \"1\",",
											"                \"name\": \"workout 1\",",
											"                \"description\": \"workout 1 description\"",
											"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workout(id: 1) {\n    id, name, description\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createWorkout",
					"item": [
						{
							"name": "create workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "498a34e1-d6e0-4945-b3e5-e8471db33ec0",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test program\",",
											"                    \"description\": \"blah blah blah\",",
											"                    \"projectedTime\": 100",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test program\",\n    programId: 1,\n    description: \"blah blah blah\",\n    projectedTime: 100\n  ) {\n    workout {\n        name\n        description\n        projectedTime\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create workout w/o description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d788ba4-b8cb-49e4-952e-cfd13788f065",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test program\",",
											"                    \"description\": \"\",",
											"                    \"projectedTime\": 100",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test program\",\n    programId: 1,\n    projectedTime: 100\n  ) {\n    workout {\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": "{\n\t\"name\": \"test program\",\n\t\"programId\": 1,\n\t\"projectedTime\": 100\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create workout w/o projected time",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "494877fc-6517-4c69-a9a8-10e414941c25",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test program\",",
											"                    \"description\": \"blah blah blah\",",
											"                    \"projectedTime\": 0",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test program\",\n    programId: 1,\n    description: \"blah blah blah\"\n) {\n    workout {\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateWorkout",
					"item": [
						{
							"name": "Update workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c9172e8-0749-453a-9e2c-1e29ca472a89",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateWorkout\": {",
											"                \"workout\": {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"new workout name\",",
											"                    \"description\": \"new desc\",",
											"                    \"projectedTime\": 200",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkout(id: 1, name: \"new workout name\", description: \"new desc\", projectedTime: 200){\n    workout {\n      id,\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non-existent workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dc921e1-af23-47dc-9977-a24b144879ca",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"404 Not Found: Workout not found.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkout(id: -1, name: \"new workout name\", description: \"new desc\", projectedTime: 200){\n    workout {\n      id,\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteWorkout",
					"item": [
						{
							"name": "Delete workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c599c490-a6e8-459a-8f8c-b64940b3ec3b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteWorkout\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkout(id: 1) {\n    ok\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d469931-2580-4448-8efb-c69b8fc192a4",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"404 Not Found: Workout not found.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkout(id: -1) {\n    ok\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0885b1c5-63ad-4545-bb61-252c56ab3f35",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b404a7bf-edc3-4a0a-9cdc-e1f3e315296e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}