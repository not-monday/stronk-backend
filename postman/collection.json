{
	"info": {
		"_postman_id": "1bd357fa-7a3e-462a-ab5c-27521d88006c",
		"name": "stronk",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "1. Mutation: createUser",
					"item": [
						{
							"name": "Create without currentProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542e872-4a6c-4960-86f3-7f253e0aca49",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"test_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    console.log(result);",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b148e16-6239-4a2f-8047-c7efd651ba4b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"Username, email or ID is not unique.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c354b93c-259b-45db-9774-4db4b07a005d",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cf2958b-119e-4d8c-af01-aeba95897774",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"username\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74ccd18a-1f13-462a-8603-8147a5181bb6",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"email\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Queries: user, users",
					"item": [
						{
							"name": "users query (full nested)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7deb1ad-03e1-4e39-8409-6eff14640ae3",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"users\": [",
											"                {",
											"                    \"name\": \"test name\",",
											"                    \"username\": \"test username\"",
											"                },",
											"                {",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"mxwvy\",",
											"                },",
											"                {",
											"                    \"name\": \"jason cheung\",",
											"                    \"username\": \"kakit\",",
											"                },",
											"                {",
											"                    \"name\": \"richard wei\",",
											"                    \"username\": \"chengchu\",",
											"                },",
											"                {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"test_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n\tusers {\n\t\t... on ProtectedUser{\n          username\n    \t\t\tname\n    }\n    ... on User {\n\t\t\tid\n      name\n      username\n      email\n      currentProgram {\n        id\n      }\n    }\n  }     \n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "354"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 06:51:49 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"users\": [\n            {\n                \"id\": \"user_id_1\",\n                \"name\": \"max b wavy\",\n                \"username\": \"mxwvy\",\n                \"email\": \"max.wavy@gmail.com\",\n                \"currentProgram\": null\n            },\n            {\n                \"id\": \"user_id_2\",\n                \"name\": \"jason cheung\",\n                \"username\": \"kakit\",\n                \"email\": \"ka.kit@gmail.com\",\n                \"currentProgram\": null\n            },\n            {\n                \"id\": \"user_id_3\",\n                \"name\": \"richard wei\",\n                \"username\": \"chengchu\",\n                \"email\": \"richard.wei@gmail.com\",\n                \"currentProgram\": null\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "user query by username (full nested)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "229fc96c-0ad5-4ecd-bb18-0170eb9b20c2",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"name\": \"test_name\",",
											"                \"username\": \"test_username\",",
											"                \"id\": \"test_id\",",
											"                \"email\": \"test_email\",",
											"                \"currentProgram\": null",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf78dcde-8d4b-49c4-aa16-a14be1e679a9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n\tuser(username: \"test_username\") {\n    name\n    username\n\t\t... on User {\n            id\n\t\t\temail\n            currentProgram {\n                id\n                name\n                description\n                duration\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query by username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53501320-5be5-486a-b286-fe321ab6d034",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"name\": \"richard wei\",",
											"                \"username\": \"chengchu\",",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(username: \"chengchu\") {\n        name\n        username\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query - NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d2a5c4f-3be4-42cc-baa6-20411aed99db",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"User not found.\";",
											"    var expected_code = \"NOT_FOUND_ERROR\"",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(username: \"username_10\") {\n        name\n        username\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateUser",
					"item": [
						{
							"name": "Update non-existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bed1a37f-492d-4ffe-99a1-763ff2480dc0",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"User not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(username: \"user_id_x\", name: \"new_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5330b85e-6c81-4fc5-861e-abae56e71806",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"UNAUTHORIZED_ERROR\";",
											"    var expected_msg = \"User does not have access to this resource or action.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(username: \"mxwvy\", name: \"new_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "922db4b0-3f03-4fb7-bb35-49e5052df18a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(username: \"test_username\", email: \"new_email\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d868ea2a-ec31-4ed9-9f40-b588c1a319ee",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"new_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(username: \"test_username\", name: \"new_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update currentProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce30e55b-8413-4128-83c9-7edf93180709",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"new_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": {",
											"                        \"id\": \"2\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(username: \"test_username\", currentProgram: 2) {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteUser",
					"item": [
						{
							"name": "Delete user that exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4893235-7414-4bd1-b5b5-6b3d667215cc",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteUser\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteUser(username: \"test_username\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1ed52a2-b233-4061-b971-82d728f5aca6",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"User not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteUser(username: \"test_id_x\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "967b3943-2357-43cf-b610-7b4fa52518e9",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"UNAUTHORIZED_ERROR\";",
											"    var expected_msg = \"User does not have access to this resource or action.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteUser(username: \"kakit\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "clean up",
					"item": [
						{
							"name": "Create without currentProgram Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2729b989-daa0-4970-9361-19191ba1120b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"test_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Tests for graphQL queries and mutations for users.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cbc910e3-6a49-43d1-839e-a012c985ec04",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5e5e88fc-0d34-4b31-8e94-dbaa2313e146",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "exercise",
			"item": [
				{
					"name": "1. Queries: exercise, exercises",
					"item": [
						{
							"name": "exercises query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5519744d-bb5d-4965-98a3-68a57f6eb38f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercises\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"bicep curls\",",
											"                    \"description\": \"bicep curls description\"",
											"                },",
											"                {",
											"                    \"id\": \"2\",",
											"                    \"name\": \"squats\",",
											"                    \"description\": \"squats description\"",
											"                },",
											"                {",
											"                    \"id\": \"3\",",
											"                    \"name\": \"pullups\",",
											"                    \"description\": \"pullups curls description\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercises {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbd09d5f-d2d0-4a09-9a02-ec402cf5ac8f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": {",
											"                \"id\": \"2\",",
											"                \"name\": \"squats\",",
											"                \"description\": \"squats description\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(id: 2) {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query - NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "224cc2f6-5f27-4376-bad1-f9cb766932e3",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": null",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(id: -1) {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createExercise",
					"item": [
						{
							"name": "Create exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8db260be-43bb-4ff1-9ae2-83a6deb151da",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createExercise\": {",
											"                \"exercise\": {",
											"                    \"name\": \"Ex1\",",
											"                    \"description\": \"ex1 desc\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"ex1\", desc: \"ex1 desc\") {\n        exercise {\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5a93acd-901d-4698-a34e-5195533fdaf3",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createExercise\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(desc: \"newest exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e2f5dcc-7b63-45f0-9c05-efd07e6be533",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createExercise\\\" argument \\\"desc\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0fba478b-f9e2-4840-ace1-864ed75db5ac",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"new exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateExercise",
					"item": [
						{
							"name": "Update non-existent exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a45d88e-fe85-4775-88bf-d94e4e16dd0a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 0) {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78c4f90c-f4b2-4ed1-be3f-03bf5ea10e25",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateExercise\": {",
											"                \"exercise\": {",
											"                    \"id\": \"4\",",
											"                    \"name\": \"New Exercise\",",
											"                    \"description\": \"ex1 desc\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 4, name: \"new exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46cf5917-e020-4755-9213-cef00b524109",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateExercise\": {",
											"                \"exercise\": {",
											"                    \"id\": \"4\",",
											"                    \"name\": \"New Exercise\",",
											"                    \"description\": \"new description\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 4, desc: \"new description\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update author",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ec4ccbc-912b-44de-8746-a16a86b3635c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateExercise\": {",
											"                \"exercise\": {",
											"                    \"id\": \"4\",",
											"                    \"name\": \"New Exercise\",",
											"                    \"author\": \"test_id\",",
											"                    \"description\": \"new description\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 4, author: \"test_username\") {\n        exercise {\n            id\n            name\n            author\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteExercise",
					"item": [
						{
							"name": "Delete existing unused exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36019fef-53a2-492b-8868-1512a4914ebc",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteExercise\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteExercise(id: 4) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4da84dcb-0bc5-474c-851d-9cc80680b633",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteExercise(id: 0) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "workout",
			"item": [
				{
					"name": "1. Queries: workout, workouts",
					"item": [
						{
							"name": "program workouts query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3077c9c0-79ce-4a63-bbdc-290d2b59de48",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workouts\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"workout 1\",",
											"                    \"description\": \"workout 1 description\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workouts(programId: 1) {\n    id, name, description\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "workout query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a2f1421-cd92-4753-bdfa-08fbde90d008",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workout\": {",
											"                \"id\": \"1\",",
											"                \"name\": \"workout 1\",",
											"                \"description\": \"workout 1 description\"",
											"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workout(id: 1) {\n    id, name, description\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createWorkout",
					"item": [
						{
							"name": "create workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a41f607-c4bd-429a-bbdf-26d7b1b8fd35",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test workout\",",
											"                    \"description\": \"blah blah blah\",",
											"                    \"projectedTime\": 100,",
											"                    \"scheduledTime\": \"2099-01-20T12:00:00+00:00\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test workout\",\n    programId: 1,\n    description: \"blah blah blah\",\n    projectedTime: 100,\n    scheduledTime: \"2099-01-20T12:00:00+00:00\"\n  ) {\n    workout {\n        name\n        description\n        projectedTime\n        scheduledTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create workout w/o description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e1dc6a5-b4b1-4d87-a40a-4a488b31bf76",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test workout\",",
											"                    \"description\": \"\",",
											"                    \"projectedTime\": 100,",
											"                    \"scheduledTime\": \"2099-01-20T12:00:00+00:00\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test workout\",\n    programId: 1,\n    projectedTime: 100,\n    scheduledTime: \"2099-01-20T12:00:00+00:00\"\n  ) {\n    workout {\n      name\n      description\n      projectedTime\n      scheduledTime\n    }\n  }\n}\n",
										"variables": "{\n\t\"name\": \"test program\",\n\t\"programId\": 1,\n\t\"projectedTime\": 100\n}"
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create workout w/o projected time",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cd472be-8945-4575-9782-b260fc50be57",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test workout\",",
											"                    \"description\": \"blah blah blah\",",
											"                    \"projectedTime\": 0,",
											"                    \"scheduledTime\": \"2099-01-20T12:00:00+00:00\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test workout\",\n    programId: 1,\n    description: \"blah blah blah\",\n    scheduledTime: \"2099-01-20T12:00:00+00:00\"\n) {\n    workout {\n      name\n      description\n      projectedTime\n      scheduledTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create workout scheduled for invalid time",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4007b132-2c16-4734-a8af-2149133f7f49",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"BAD_REQUEST_ERROR\";",
											"    var expected_msg = \"Workout cannot be scheduled in the past.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test workout\",\n    programId: 1,\n    description: \"blah blah blah\",\n    projectedTime: 100,\n    scheduledTime: \"2000-01-20T12:00:00+00:00\"\n  ) {\n    workout {\n        name\n        description\n        projectedTime\n        scheduledTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateWorkout",
					"item": [
						{
							"name": "Update workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7dbea70-d5ab-4199-9eb0-3687046923b7",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateWorkout\": {",
											"                \"workout\": {",
											"                    \"id\": \"5\",",
											"                    \"name\": \"new workout name\",",
											"                    \"description\": \"new desc\",",
											"                    \"projectedTime\": 200",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkout(id: 5, name: \"new workout name\", description: \"new desc\", projectedTime: 200){\n    workout {\n      id,\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non-existent workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba8f3eeb-26f6-465e-a0a5-c6a45edfbc82",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkout(id: -1, name: \"new workout name\", description: \"new desc\", projectedTime: 200){\n    workout {\n      id,\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteWorkout",
					"item": [
						{
							"name": "Delete workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b6d9377-3874-4f5d-b674-438cf9bc0aa1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteWorkout\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkout(id: 5) {\n    ok\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbad8f7b-74e4-47c9-b171-64053befead8",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkout(id: -1) {\n    ok\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6922d83-a8d0-4bda-bc87-7da0e3430eaa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e8248e41-0d81-48b6-84b1-e37cdef3f64b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "program",
			"item": [
				{
					"name": "1. Queries: program, programs",
					"item": [
						{
							"name": "programs query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e46e88f-3808-4f25-84ee-5c2412424bba",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programs\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"author\": {",
											"                        \"name\": \"max b wavy\",",
											"                        \"username\": \"mxwvy\"",
											"                    },",
											"                    \"name\": \"max's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 3\"",
											"                },",
											"                {",
											"                    \"id\": \"2\",",
											"                    \"author\": {",
											"                        \"name\": \"jason cheung\",",
											"                        \"username\": \"kakit\"",
											"                    },",
											"                    \"name\": \"jason's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 2\"",
											"                },",
											"                {",
											"                    \"id\": \"3\",",
											"                    \"author\": {",
											"                        \"name\": \"richard wei\",",
											"                        \"username\": \"chengchu\"",
											"                    },",
											"                    \"name\": \"richard's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 1\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programs {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "programs query by author",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d2ecebe-0df2-4aa5-a861-38986ccbd82a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programs\": [",
											"                {",
											"                    \"id\": \"3\",",
											"                    \"author\": {",
											"                        \"name\": \"richard wei\",",
											"                        \"username\": \"chengchu\"",
											"                    },",
											"                    \"name\": \"richard's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 1\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programs(author: \"chengchu\") {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "252b5eac-06ff-4af0-a24a-1a509cee64e7",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"program\": {",
											"                \"id\": \"1\",",
											"                \"author\": {",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"mxwvy\"",
											"                },",
											"                \"name\": \"max's program\",",
											"                \"duration\": 10,",
											"                \"description\": \"dummy description 3\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    program(id: 1) {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program query by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e994404-fd35-4168-85ae-88bf8568198a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"program\": {",
											"                \"id\": \"1\",",
											"                \"author\": {",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"mxwvy\"",
											"                },",
											"                \"name\": \"max's program\",",
											"                \"duration\": 10,",
											"                \"description\": \"dummy description 3\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    program(name: \"max's program\") {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createProgram",
					"item": [
						{
							"name": "Create program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf43cc12-dce3-4d06-ae47-af3db22bd87c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createProgram\": {",
											"                \"program\": {",
											"                    \"name\": \"New Program\",",
											"                    \"author\": {",
											"                        \"name\": \"test_name\"",
											"                    },",
											"                    \"duration\": 10,",
											"                    \"description\": \"newest program\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", duration: 10, desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de26fc5c-3b57-43c3-af76-00256c9d51f9",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgram\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(duration: 10, desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75d62405-c239-4370-ac51-137ef2ba1331",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgram\\\" argument \\\"duration\\\" of type \\\"Int!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb4a95ad-928d-48ff-a182-8ae90c5f3a73",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgram\\\" argument \\\"desc\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", duration: 10) {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateProgram",
					"item": [
						{
							"name": "Update program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "109dec00-aab8-46e9-ac3f-8ae3f13b63c1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateProgram\": {",
											"                \"program\": {",
											"                    \"name\": \"New Program 1\",",
											"                    \"author\": {",
											"                        \"name\": \"test_name\"",
											"                    },",
											"                    \"duration\": 11,",
											"                    \"description\": \"newest program 1\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateProgram(id: 4, name: \"new program 1\", duration: 11, desc: \"newest program 1\") {\n        program {\n            name\n            author {\n                name\n            }\n            duration\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update another user's program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dee3344-ea5f-4455-8f84-c3c8505f055c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"UNAUTHORIZED_ERROR\";",
											"    var expected_msg = \"User does not have access to this resource or action.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateProgram(id: 2, name: \"new program 1\", author: \"user_id_2\", duration: 11, desc: \"newest program 1\") {\n        program {\n            name\n            author {\n                name\n            }\n            duration\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non-existent program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f450d6d-331d-437d-8b0b-842fd6bb3b7f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Program not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateProgram(id: 10, name: \"new program 1\", author: \"user_id_2\", duration: 11, desc: \"newest program 1\") {\n        program {\n            name\n            author {\n                name\n            }\n            duration\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteProgram",
					"item": [
						{
							"name": "Delete program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c777eb4b-b798-468b-8b15-f44c73d68f9b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteProgram\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgram(id: 4) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e29ff85-eed1-4d6e-988c-f4bd8d5d2651",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Program not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgram(id: 4) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "5. Mutation: subscribe",
					"item": [
						{
							"name": "Subscribe to program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ee3a6b2-2532-4a9b-a4ee-1e3aefd020ff",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"subscribeToProgram\": {",
											"                \"updatedUser\": {",
											"                    \"currentProgram\": {",
											"                        \"author\": {",
											"                            \"username\": \"mxwvy\"",
											"                        },",
											"                        \"name\": \"Max's Program\",",
											"                        \"workouts\": [",
											"                            {",
											"                                \"name\": \"test workout\",",
											"                                \"workoutExercises\": []",
											"                            },",
											"                            {",
											"                                \"name\": \"test workout\",",
											"                                \"workoutExercises\": []",
											"                            },",
											"                            {",
											"                                \"name\": \"workout 1\",",
											"                                \"workoutExercises\": [",
											"                                    {",
											"                                        \"exercise\": {",
											"                                            \"name\": \"bicep curls\"",
											"                                        }",
											"                                    },",
											"                                    {",
											"                                        \"exercise\": {",
											"                                            \"name\": \"squats\"",
											"                                        }",
											"                                    },",
											"                                    {",
											"                                        \"exercise\": {",
											"                                            \"name\": \"pullups\"",
											"                                        }",
											"                                    }",
											"                                ]",
											"                            }",
											"                        ]",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    subscribeToProgram(programId: 1) {\n        updatedUser { \n            currentProgram {\n                author {\n                    username\n                }\n                name\n                workouts {\n                    name, workoutExercises {\n                        exercise {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Subscribe to non-existent program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9770d08b-bc54-45c7-acf0-5c3525366c50",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Program not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    subscribeToProgram(programId: 10) {\n        updatedUser { \n            currentProgram {\n                name\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fa3d6408-9499-4cf9-8e11-87973bad8f17",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ba558d30-1bc2-489c-9c55-41b8e6e8d239",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "program review",
			"item": [
				{
					"name": "1. Mutation: createProgramReview",
					"item": [
						{
							"name": "Create program review",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec168ab3-e9d2-46d6-8305-8aea87af50ee",
										"exec": [
											"",
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createProgramReview\": {",
											"                \"programReview\": {",
											"                    \"program\": {",
											"                        \"id\": \"1\"",
											"                    },",
											"                    \"comments\": \"test comment\",",
											"                    \"rating\": 5",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, rating: 5, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6096ae1-374a-4eba-8ea5-f3767c9e279a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"User already reviewed this program\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, rating: 5, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bad Request - Missing comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3075eb41-0286-4818-8c59-1e3a0e49238f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgramReview\\\" argument \\\"comments\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, rating: 5) {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bad Request - Missing rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2b91e1c-5ac5-4bb7-915f-ff5fbea28b04",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgramReview\\\" argument \\\"rating\\\" of type \\\"Int!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bad Request - Missing programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03b3532e-69b0-4a7f-864e-22cdfe3d77a7",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgramReview\\\" argument \\\"programId\\\" of type \\\"Int!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(rating: 5, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Queries: program review, program reviews",
					"item": [
						{
							"name": "program reviews query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "225acdfa-6582-4b84-9e1d-1d7b2e95d357",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programReviews\": [",
											"                {",
											"                    \"comments\": \"test comment\",",
											"                    \"rating\": 5,",
											"                    \"program\": {",
											"                        \"name\": \"max's program\",",
											"                        \"description\": \"dummy description 3\"",
											"                    }",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programReviews {\n        comments\n        rating\n        program {\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program review query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d631fc52-86c9-40da-9015-e5ba18ad1516",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programReview\": {",
											"                \"comments\": \"test comment\",",
											"                \"rating\": 5,",
											"                \"program\": {",
											"                    \"name\": \"max's program\",",
											"                    \"description\": \"dummy description 3\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programReview(programId: 1) {\n        comments\n        rating\n        program {\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: deleteProgramReview",
					"item": [
						{
							"name": "Delete program review",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e5a7cf2-6310-4879-b6d1-27f41c99f0fd",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteProgramReview\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgramReview(programId: 1) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existant program review",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d91f1894-603d-428f-993b-0e12569c25bd",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Review not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgramReview(programId: 1) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "workout_exercise",
			"item": [
				{
					"name": "1. Queries: workoutExercise, workoutExercises",
					"item": [
						{
							"name": "workout exercises query by workout id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac58778-9cb4-4be7-824c-9218b0aa702c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workoutExercises\": [",
											"                {",
											"                    \"workoutId\": \"1\",",
											"                    \"exerciseId\": \"1\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        10,",
											"                        10,",
											"                        10",
											"                    ],",
											"                    \"restTime\": 10",
											"                },",
											"                {",
											"                    \"workoutId\": \"1\",",
											"                    \"exerciseId\": \"2\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        10,",
											"                        10,",
											"                        10",
											"                    ],",
											"                    \"restTime\": 10",
											"                },",
											"                {",
											"                    \"workoutId\": \"1\",",
											"                    \"exerciseId\": \"3\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        10,",
											"                        10,",
											"                        10",
											"                    ],",
											"                    \"restTime\": 10",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workoutExercises(workoutId: 1) {\n    workoutId, exerciseId, workoutWeights, workoutReps, restTime \n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "workout exercise query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2b26feb-7d8b-4474-be44-326e2d29ccb5",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workoutExercise\": {",
											"                \"workoutId\": \"1\",",
											"                \"exerciseId\": \"1\",",
											"                \"workoutWeights\": [",
											"                    10.0,",
											"                    10.0,",
											"                    10.0",
											"                ],",
											"                \"workoutReps\": [",
											"                    10,",
											"                    10,",
											"                    10",
											"                ],",
											"                \"restTime\": 10,",
											"                \"exercise\": {",
											"                    \"name\": \"bicep curls\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workoutExercise(workoutId: 1, exerciseId: 1) {\n    workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n      name\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: add workout exercise to workout",
					"item": [
						{
							"name": "add workout exercise from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "495ff32c-c92c-4ec3-8169-f4b0ab84b39b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"addWorkoutExercise\": {",
											"                \"workoutExercise\": {",
											"                    \"workoutId\": \"4\",",
											"                    \"exerciseId\": \"1\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        1,",
											"                        2",
											"                    ],",
											"                    \"restTime\": 10,",
											"                    \"exercise\": {",
											"                        \"name\": \"bicep curls\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10], \n    workoutReps: [1, 2] \n    restTime: 10\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "add duplicate workout exercise from workout Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0567f791-e3c4-40d5-a015-bfecd0cf1c74",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"Exercise has already been added to this workout\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10], \n    workoutReps: [1, 2] \n    restTime: 10\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "adbf6670-6471-4e0a-98bc-ea2c5bc81a0d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6fb8fb5e-4719-4bad-892c-228de1443618",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: update workout exercise",
					"item": [
						{
							"name": "update workout exercise with correct params from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8900242f-be50-47ee-82c6-ad6e671c3bec",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateWorkoutExercise\": {",
											"                \"workoutExercise\": {",
											"                    \"workoutId\": \"4\",",
											"                    \"exerciseId\": \"1\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"                    \"restTime\": 2,",
											"                    \"exercise\": {",
											"                        \"name\": \"bicep curls\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10, 10], \n    workoutReps: [1, 2, 3] \n    restTime: 2\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "update workout exercise mismatched weights and reps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b09e146-0f06-4af9-955e-7fbdb9e9de93",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"BAD_REQUEST_ERROR\";",
											"    var expected_msg = \"Number of weights needs to be the same as the number of reps\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10, 10, 11], \n    workoutReps: [1, 2] \n    restTime: 2\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "update non-existant workout exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fb2020d-5203-4373-8656-3353e0ba9896",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkoutExercise(\n    workoutId: 0, \n    exerciseId: 1, \n    workoutWeights : [10], \n    workoutReps: [1] \n    restTime: 2\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: remove workout exercise from workout",
					"item": [
						{
							"name": "delete workout exercise from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "526b3e74-d4c5-4b0d-8a2f-52b172e1ea76",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteWorkoutExercise\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1\n  ) {\n    ok\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete non-existant workout exercise from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42a82cd1-20e0-44e3-9f8f-fe479d37d7ff",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1\n  ) {\n    ok\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "weight",
			"item": [
				{
					"name": "1. Mutation: add weight",
					"item": [
						{
							"name": "add weight 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6002d916-0e66-409e-b3ce-187cb1218b00",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"addWeight\": {",
											"                \"weight\": {",
											"                    \"weight\": 104.5",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    addWeight(weight: 104.5, measuredAt: \"2020-01-20T12:00:00+00:00\") {\n        weight {\n            weight\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "add weight 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e876d0e-bb9f-4023-bacd-69753d33ed43",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"addWeight\": {",
											"                \"weight\": {",
											"                    \"weight\": 102.0",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    addWeight(weight: 102.0, measuredAt: \"2020-01-19T12:00:00+00:00\") {\n        weight {\n            weight\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "add weight 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "619439f9-e922-4329-8a48-2f39950620cf",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"addWeight\": {",
											"                \"weight\": {",
											"                    \"weight\": 101.5",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    addWeight(weight: 101.5, measuredAt: \"2020-01-18T12:00:00+00:00\") {\n        weight {\n            weight\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Queries: weight, weights",
					"item": [
						{
							"name": "weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5818c21e-66dc-4cc2-9d3a-463164f186b1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"weight\": {",
											"                \"weight\": 104.5,",
											"                \"measuredAt\": \"2020-01-20T12:00:00+00:00\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    weight(measuredAt: \"2020-01-20\") {\n        weight\n        measuredAt\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "weights",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84afa63b-3183-4b00-b6a0-003e2c2eb69a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"weights\": [",
											"                {",
											"                    \"weight\": 104.5,",
											"                    \"measuredAt\": \"2020-01-20T12:00:00+00:00\"",
											"                },",
											"                {",
											"                    \"weight\": 102.0,",
											"                    \"measuredAt\": \"2020-01-19T12:00:00+00:00\"",
											"                },",
											"                {",
											"                    \"weight\": 101.5,",
											"                    \"measuredAt\": \"2020-01-18T12:00:00+00:00\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    weights {\n        weight\n        measuredAt\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: update weight",
					"item": [
						{
							"name": "update existing weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9abbdfa-2f91-4437-8b49-7d6e7bc3b39c",
										"exec": [
											"",
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateWeight\": {",
											"                \"weight\": {",
											"                    \"weight\": 999.99,",
											"                    \"measuredAt\": \"2020-01-20T12:00:00+00:00\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateWeight(weight: 999.99, measuredAt: \"2020-01-20\") {\n        weight {\n            weight\n            measuredAt\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "update non-existent weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "443f75d5-f85c-4775-a672-202d2fedc4ca",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Weight not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateWeight(weight: 999.99, measuredAt: \"2020-01-02\") {\n        weight {\n            weight\n            measuredAt\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: delete weight",
					"item": [
						{
							"name": "delete existing weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3326c7e-95f9-4f81-a5b1-d7aa23561eae",
										"exec": [
											"",
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteWeight\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteWeight(measuredAt: \"2020-01-20\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete non-existing weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95337d08-2436-4aa1-84fc-9214072bffc5",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Weight not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteWeight(measuredAt: \"2020-01-20\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4c6b5d75-8c9e-4eea-a8ae-3a36e9ec8626",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b766604b-d70d-4bcc-bd40-79a510c1b9d8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}