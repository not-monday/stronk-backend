{
	"info": {
		"_postman_id": "75ae7bca-8987-4870-b4cc-81534c8e03ef",
		"name": "Stronk",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "1. Queries: user, users",
					"item": [
						{
							"name": "users query (full nested)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "394cbac0-e7a5-4b90-a03d-5848bd0e52b5",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"users\": [",
											"                {",
											"                    \"id\": \"user_id_4\",",
											"                    \"name\": \"test name\",",
											"                    \"username\": \"test username\",",
											"                    \"email\": \"test@email.com\",",
											"                    \"currentProgram\": null",
											"                },",
											"                {",
											"                    \"id\": \"user_id_1\",",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"mxwvy\",",
											"                    \"email\": \"max.wavy@gmail.com\",",
											"                    \"currentProgram\": {",
											"                        \"id\": \"1\",",
											"                        \"name\": \"max's program\",",
											"                        \"description\": \"dummy description 3\",",
											"                        \"duration\": 10",
											"                    }",
											"                },",
											"                {",
											"                    \"id\": \"user_id_2\",",
											"                    \"name\": \"jason cheung\",",
											"                    \"username\": \"kakit\",",
											"                    \"email\": \"ka.kit@gmail.com\",",
											"                    \"currentProgram\": {",
											"                        \"id\": \"2\",",
											"                        \"name\": \"jason's program\",",
											"                        \"description\": \"dummy description 2\",",
											"                        \"duration\": 10",
											"                    }",
											"                },",
											"                {",
											"                    \"id\": \"user_id_3\",",
											"                    \"name\": \"richard wei\",",
											"                    \"username\": \"chengchu\",",
											"                    \"email\": \"richard.wei@gmail.com\",",
											"                    \"currentProgram\": {",
											"                        \"id\": \"3\",",
											"                        \"name\": \"richard's program\",",
											"                        \"description\": \"dummy description 1\",",
											"                        \"duration\": 10",
											"                    }",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    users {\n        id\n        name\n        username\n        email\n        currentProgram {\n            id\n            name\n            description\n            duration\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "354"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 06:51:49 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"users\": [\n            {\n                \"id\": \"user_id_1\",\n                \"name\": \"max b wavy\",\n                \"username\": \"mxwvy\",\n                \"email\": \"max.wavy@gmail.com\",\n                \"currentProgram\": null\n            },\n            {\n                \"id\": \"user_id_2\",\n                \"name\": \"jason cheung\",\n                \"username\": \"kakit\",\n                \"email\": \"ka.kit@gmail.com\",\n                \"currentProgram\": null\n            },\n            {\n                \"id\": \"user_id_3\",\n                \"name\": \"richard wei\",\n                \"username\": \"chengchu\",\n                \"email\": \"richard.wei@gmail.com\",\n                \"currentProgram\": null\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "user query by id (full nested)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cbf732f-e0a6-4fbe-821e-5acec32a3098",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"id\": \"user_id_1\",",
											"                \"name\": \"max b wavy\",",
											"                \"username\": \"mxwvy\",",
											"                \"email\": \"max.wavy@gmail.com\",",
											"                \"currentProgram\": {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"max's program\",",
											"                    \"description\": \"dummy description 3\",",
											"                    \"duration\": 10",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(id: \"user_id_1\") {\n        id\n        name\n        username\n        email\n        currentProgram {\n            id\n            name\n            description\n            duration\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query by username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0958ada-3cd5-4d81-b8f3-cdbd70c4eae7",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"id\": \"user_id_3\",",
											"                \"name\": \"richard wei\",",
											"                \"username\": \"chengchu\",",
											"                \"email\": \"richard.wei@gmail.com\",",
											"                \"currentProgram\": {",
											"                    \"id\": \"3\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(username: \"chengchu\") {\n        id\n        name\n        username\n        email\n        currentProgram {\n            id\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f947a30-b0bc-4681-a95e-a1e0d73ad597",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"id\": \"user_id_2\",",
											"                \"name\": \"jason cheung\",",
											"                \"username\": \"kakit\",",
											"                \"email\": \"ka.kit@gmail.com\",",
											"                \"currentProgram\": {",
											"                    \"id\": \"2\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(email: \"ka.kit@gmail.com\") {\n        id\n        name\n        username\n        email\n        currentProgram {\n            id\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query by currentProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "775ba3fa-483a-47a3-8800-f6567625b8f6",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"id\": \"user_id_2\",",
											"                \"name\": \"jason cheung\",",
											"                \"username\": \"kakit\",",
											"                \"email\": \"ka.kit@gmail.com\",",
											"                \"currentProgram\": {",
											"                    \"id\": \"2\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(currentProgram: 2) {\n        id\n        name\n        username\n        email\n        currentProgram {\n            id\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query - NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8267527b-0874-48aa-8c6b-0c2c875dc9d8",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": null",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(id: \"user_id_10\") {\n        id\n        name\n        username\n        email\n        currentProgram {\n            id\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createUser",
					"item": [
						{
							"name": "Create without currentProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2174be2-9352-4984-83c0-6572579d1320",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"test_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa8f1240-864c-4b21-905f-5b9a13c36241",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"Username, email or ID is not unique.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c2dd05d-9e23-4715-9ed9-41815dccde62",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8704ad4e-100a-43af-b843-fee79a1e1555",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"username\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6266ccbd-c39c-4eab-bcc4-afe27963c585",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"email\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateUser",
					"item": [
						{
							"name": "Update non-existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a4f24da-ea41-48f6-97bc-12ac84a5f823",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"User not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"user_id_x\", name: \"new_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1873b092-6d31-47f7-be53-bd73bc049ffe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "761f49ac-e4cc-4ccd-8e21-6a148c84945e",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"new_username\",",
											"                    \"email\": \"test_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"test_id\", username: \"new_username\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6539b31-53e1-471a-9fff-85f5abd667ac",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"new_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"test_id\", email: \"new_email\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5c01e14-f725-4bf8-a7c1-45929a5428b1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"new_name\",",
											"                    \"username\": \"new_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"test_id\", name: \"new_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update currentProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d5c49a0-be11-45e3-9e7b-03b8efa6fa64",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"new_name\",",
											"                    \"username\": \"new_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": {",
											"                        \"id\": \"2\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"test_id\", currentProgram: 2) {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteUser",
					"item": [
						{
							"name": "Delete user that exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9402fb57-193f-444e-bb67-4828321e6243",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteUser\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteUser(id: \"user_id_4\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1de80245-710f-4ee9-bf60-20aea3375c9e",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"User not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteUser(id: \"test_id_x\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Tests for graphQL queries and mutations for users.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0b7754e5-4e5d-42f8-b0be-dd6e81e09073",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a2a30614-c40b-495b-bd5f-e7e7122be251",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "exercise",
			"item": [
				{
					"name": "1. Queries: exercise, exercises",
					"item": [
						{
							"name": "exercises query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2fdb192-6f14-4330-90f4-c170bad0b387",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercises\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"bicep curls\",",
											"                    \"description\": \"bicep curls description\"",
											"                },",
											"                {",
											"                    \"id\": \"2\",",
											"                    \"name\": \"squats\",",
											"                    \"description\": \"squats description\"",
											"                },",
											"                {",
											"                    \"id\": \"3\",",
											"                    \"name\": \"pullups\",",
											"                    \"description\": \"pullups curls description\"",
											"                },",
											"                {",
											"                    \"id\": \"4\",",
											"                    \"name\": \"unused exercise\",",
											"                    \"description\": \"deletable\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercises {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c03f4a4-85d6-465e-813f-2a8b1f55bf1d",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": {",
											"                \"id\": \"2\",",
											"                \"name\": \"squats\",",
											"                \"description\": \"squats description\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(id: 2) {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b15d4fae-8f16-4430-97c5-715e30506c8b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": {",
											"                \"id\": \"2\",",
											"                \"name\": \"squats\",",
											"                \"description\": \"squats description\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(name: \"squats\") {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query by desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a23641c4-2de6-4976-9b59-09fb4c0f25c4",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": {",
											"                \"id\": \"2\",",
											"                \"name\": \"squats\",",
											"                \"description\": \"squats description\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(desc: \"squats description\") {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query - NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fab74c7-c016-4188-860b-36a9f2a78592",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": null",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(id: -1) {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createExercise",
					"item": [
						{
							"name": "Create exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bda523c2-4aac-468a-afc6-65f104a2223f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createExercise\": {",
											"                \"exercise\": {",
											"                    \"name\": \"Ex1\",",
											"                    \"description\": \"ex1 desc\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"ex1\", desc: \"ex1 desc\") {\n        exercise {\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05f65bbb-5819-4ed8-94c0-6a0635d784a6",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"Name already used by another exercise\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"ex1\", desc: \"newest exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d225491-d9b7-4bdd-b1e0-9bdfbb0a895d",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createExercise\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(desc: \"newest exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d1759ce-723b-4fad-ab9e-1f288a0092a2",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createExercise\\\" argument \\\"desc\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a382924-ffce-4ee3-880b-4c003113c889",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"new exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateExercise",
					"item": [
						{
							"name": "Update non-existent exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5726fa71-54ed-49da-9ecd-ceaad261dee6",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 0) {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d599c7f-f0f4-4fe3-b084-4c5b17b46e06",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateExercise\": {",
											"                \"exercise\": {",
											"                    \"id\": \"4\",",
											"                    \"name\": \"New Exercise\",",
											"                    \"description\": \"deletable\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 4, name: \"new exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fdd9601-9235-4259-800f-f9fe07262ef5",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateExercise\": {",
											"                \"exercise\": {",
											"                    \"id\": \"4\",",
											"                    \"name\": \"New Exercise\",",
											"                    \"description\": \"new description\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 4, desc: \"new description\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteExercise",
					"item": [
						{
							"name": "Delete existing unused exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a46a3cf-88bd-4e43-97c8-edffa2e2029a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteExercise\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteExercise(id: 4) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e997da6-d2ff-430c-9ee5-f90b6655cbd3",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteExercise(id: 0) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "workout",
			"item": [
				{
					"name": "1. Queries: workout, workouts",
					"item": [
						{
							"name": "program workouts query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2939872b-4cd6-460e-a781-dfc959de52aa",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workouts\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"workout 1\",",
											"                    \"description\": \"workout 1 description\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workouts(programId: 1) {\n    id, name, description\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "workout query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d475cac4-faac-4205-87f1-ec3917effb9f",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workout\": {",
											"                \"id\": \"1\",",
											"                \"name\": \"workout 1\",",
											"                \"description\": \"workout 1 description\"",
											"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workout(id: 1) {\n    id, name, description\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createWorkout",
					"item": [
						{
							"name": "create workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6fa084f-afe2-45f7-bd51-d82013e29e5c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test program\",",
											"                    \"description\": \"blah blah blah\",",
											"                    \"projectedTime\": 100",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test program\",\n    programId: 1,\n    description: \"blah blah blah\",\n    projectedTime: 100\n  ) {\n    workout {\n        name\n        description\n        projectedTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create workout w/o description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68ba62a3-4b47-411a-a2fc-18d7139f3e03",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test program\",",
											"                    \"description\": \"\",",
											"                    \"projectedTime\": 100",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test program\",\n    programId: 1,\n    projectedTime: 100\n  ) {\n    workout {\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": "{\n\t\"name\": \"test program\",\n\t\"programId\": 1,\n\t\"projectedTime\": 100\n}"
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create workout w/o projected time",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74eb3eea-595f-40a4-9c50-b3a3db263969",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test program\",",
											"                    \"description\": \"blah blah blah\",",
											"                    \"projectedTime\": 0",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test program\",\n    programId: 1,\n    description: \"blah blah blah\"\n) {\n    workout {\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateWorkout",
					"item": [
						{
							"name": "Update workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f607f1a-0e22-4389-bf66-909f0584dc59",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateWorkout\": {",
											"                \"workout\": {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"new workout name\",",
											"                    \"description\": \"new desc\",",
											"                    \"projectedTime\": 200",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkout(id: 1, name: \"new workout name\", description: \"new desc\", projectedTime: 200){\n    workout {\n      id,\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non-existent workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e61b8957-5019-4847-bbcc-d194fff9fad2",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkout(id: -1, name: \"new workout name\", description: \"new desc\", projectedTime: 200){\n    workout {\n      id,\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteWorkout",
					"item": [
						{
							"name": "Delete workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5be2445c-1918-44f6-8900-f07d79470576",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteWorkout\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkout(id: 3) {\n    ok\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ffc5e38-2b0e-43fe-ba79-1652b2f42cb8",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkout(id: -1) {\n    ok\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb6eeb99-9de4-450e-ae75-65d0e123e459",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "41563e63-a99a-46b7-9512-3588935f90ad",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "program",
			"item": [
				{
					"name": "1. Queries: program, programs",
					"item": [
						{
							"name": "programs query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a75b5fbe-240d-41f6-86a3-d0d7cd369ec7",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programs\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"author\": {",
											"                        \"name\": \"max b wavy\",",
											"                        \"username\": \"mxwvy\"",
											"                    },",
											"                    \"name\": \"max's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 3\"",
											"                },",
											"                {",
											"                    \"id\": \"2\",",
											"                    \"author\": {",
											"                        \"name\": \"jason cheung\",",
											"                        \"username\": \"kakit\"",
											"                    },",
											"                    \"name\": \"jason's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 2\"",
											"                },",
											"                {",
											"                    \"id\": \"3\",",
											"                    \"author\": {",
											"                        \"name\": \"richard wei\",",
											"                        \"username\": \"chengchu\"",
											"                    },",
											"                    \"name\": \"richard's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 1\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programs {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74c650ce-46a9-42b1-a855-eb5d2076dc9a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"program\": {",
											"                \"id\": \"1\",",
											"                \"author\": {",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"mxwvy\"",
											"                },",
											"                \"name\": \"max's program\",",
											"                \"duration\": 10,",
											"                \"description\": \"dummy description 3\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    program(id: 1) {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program query by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00483799-8322-4d41-bc49-541ce03ce4a1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"program\": {",
											"                \"id\": \"1\",",
											"                \"author\": {",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"mxwvy\"",
											"                },",
											"                \"name\": \"max's program\",",
											"                \"duration\": 10,",
											"                \"description\": \"dummy description 3\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    program(name: \"max's program\") {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program query by author",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "135cc703-0ef2-4d59-9305-05df9dcf41f0",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"program\": {",
											"                \"id\": \"2\",",
											"                \"author\": {",
											"                    \"name\": \"jason cheung\",",
											"                    \"username\": \"kakit\"",
											"                },",
											"                \"name\": \"jason's program\",",
											"                \"duration\": 10,",
											"                \"description\": \"dummy description 2\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    program(author: \"user_id_2\") {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createProgram",
					"item": [
						{
							"name": "Create program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1d2c410-21f8-47a2-b80e-61407cf100dc",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createProgram\": {",
											"                \"program\": {",
											"                    \"name\": \"New Program\",",
											"                    \"author\": {",
											"                        \"name\": \"max b wavy\"",
											"                    },",
											"                    \"duration\": 10,",
											"                    \"description\": \"newest program\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", author: \"user_id_1\", duration: 10, desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "daec31ed-3335-4408-b501-95b237b552fd",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"Name already used by another program\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", author: \"user_id_1\", duration: 10, desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9e3dae4-df95-427f-8ae6-75e7e783d463",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgram\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(author: \"user_id_1\", duration: 10, desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing author",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d362009-1e52-43a7-ad9b-57140e2e824b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"Name already used by another program\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", author: \"user_id_1\", duration: 10, desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d69476f-13bb-4c88-bee5-8cde9212467d",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgram\\\" argument \\\"duration\\\" of type \\\"Int!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", author: \"user_id_1\", desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99a305c2-ecc3-4cb6-82ba-9ced15b1423d",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgram\\\" argument \\\"desc\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", author: \"user_id_1\", duration: 10) {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateProgram",
					"item": [
						{
							"name": "Update program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4b4b82c-a542-4b15-aa66-68bf7edb5b78",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateProgram\": {",
											"                \"program\": {",
											"                    \"name\": \"New Program 1\",",
											"                    \"author\": {",
											"                        \"name\": \"jason cheung\"",
											"                    },",
											"                    \"duration\": 11,",
											"                    \"description\": \"newest program 1\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateProgram(id: 4, name: \"new program 1\", author: \"user_id_2\", duration: 11, desc: \"newest program 1\") {\n        program {\n            name\n            author {\n                name\n            }\n            duration\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non-existent program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c0380b2-2826-4697-9e52-1d06dbbd0896",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Program not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateProgram(id: 10, name: \"new program 1\", author: \"user_id_2\", duration: 11, desc: \"newest program 1\") {\n        program {\n            name\n            author {\n                name\n            }\n            duration\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteProgram",
					"item": [
						{
							"name": "Delete program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d2ecce6-c36f-4e0a-a097-1afd2ae76341",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteProgram\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgram(id: 4) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0b534b9-1e98-4991-b829-5811d919fe17",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Program not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgram(id: 4) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "program review",
			"item": [
				{
					"name": "1. Mutation: createProgramReview",
					"item": [
						{
							"name": "Create program review",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9232e82-3542-4b42-ae00-50e6771ee2bc",
										"exec": [
											"",
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createProgramReview\": {",
											"                \"programReview\": {",
											"                    \"program\": {",
											"                        \"id\": \"1\"",
											"                    },",
											"                    \"comments\": \"test comment\",",
											"                    \"rating\": 5",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, rating: 5, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7df9ba23-fd28-4bc2-b442-d67b3108ef4e",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"User already reviewed this program\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, rating: 5, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bad Request - Missing comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f7f0aae-73ee-480b-8c7e-dd953bd5017f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgramReview\\\" argument \\\"comments\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, rating: 5) {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bad Request - Missing rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14a76b77-938b-4058-b44b-2cd42e2c6b77",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgramReview\\\" argument \\\"rating\\\" of type \\\"Int!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bad Request - Missing programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ebf6200-8a35-415a-b276-98c3110e4343",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgramReview\\\" argument \\\"programId\\\" of type \\\"Int!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(rating: 5, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Queries: program review, program reviews",
					"item": [
						{
							"name": "program reviews query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d523e5e-5103-450e-877d-1c20f40bc300",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programReviews\": [",
											"                {",
											"                    \"comments\": \"test comment\",",
											"                    \"rating\": 5,",
											"                    \"program\": {",
											"                        \"name\": \"max's program\",",
											"                        \"description\": \"dummy description 3\"",
											"                    }",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programReviews {\n        comments\n        rating\n        program {\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program review query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78dbb4f2-8b59-4801-8e32-201a0a14908c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programReview\": {",
											"                \"comments\": \"test comment\",",
											"                \"rating\": 5,",
											"                \"program\": {",
											"                    \"name\": \"max's program\",",
											"                    \"description\": \"dummy description 3\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programReview(programId: 1) {\n        comments\n        rating\n        program {\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: deleteProgramReview",
					"item": [
						{
							"name": "Delete program review",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faf86791-01c0-44f9-8a96-addef7ba5cf9",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteProgramReview\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgramReview(programId: 1) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existant program review",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a73a18c6-ff9f-4f64-9b72-014757ac5cfb",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Review not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgramReview(programId: 1) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "workout_exercise",
			"item": [
				{
					"name": "1. Queries: workoutExercise, workoutExercises",
					"item": [
						{
							"name": "workout exercises query by workout id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17ee55c9-a69a-43b8-8955-1e72c7c0ff86",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workoutExercises\": [",
											"                {",
											"                    \"workoutId\": \"1\",",
											"                    \"exerciseId\": \"1\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        10,",
											"                        10,",
											"                        10",
											"                    ],",
											"                    \"restTime\": 10",
											"                },",
											"                {",
											"                    \"workoutId\": \"1\",",
											"                    \"exerciseId\": \"2\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        10,",
											"                        10,",
											"                        10",
											"                    ],",
											"                    \"restTime\": 10",
											"                },",
											"                {",
											"                    \"workoutId\": \"1\",",
											"                    \"exerciseId\": \"3\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        10,",
											"                        10,",
											"                        10",
											"                    ],",
											"                    \"restTime\": 10",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workoutExercises(workoutId: 1) {\n    workoutId, exerciseId, workoutWeights, workoutReps, restTime \n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "workout exercise query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cffd979d-0482-4bdc-830a-a8ed4fe8ca61",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workoutExercise\": {",
											"                \"workoutId\": \"1\",",
											"                \"exerciseId\": \"1\",",
											"                \"workoutWeights\": [",
											"                    10.0,",
											"                    10.0,",
											"                    10.0",
											"                ],",
											"                \"workoutReps\": [",
											"                    10,",
											"                    10,",
											"                    10",
											"                ],",
											"                \"restTime\": 10,",
											"                \"exercise\": {",
											"                    \"name\": \"bicep curls\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workoutExercise(workoutId: 1, exerciseId: 1) {\n    workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n      name\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: add workout exercise to workout",
					"item": [
						{
							"name": "add workout exercise from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "714d7117-44af-4703-a483-1c6c89fbb9bd",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"addWorkoutExercise\": {",
											"                \"workoutExercise\": {",
											"                    \"workoutId\": \"4\",",
											"                    \"exerciseId\": \"1\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        1,",
											"                        2",
											"                    ],",
											"                    \"restTime\": 10,",
											"                    \"exercise\": {",
											"                        \"name\": \"bicep curls\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10], \n    workoutReps: [1, 2] \n    restTime: 10\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "add duplicate workout exercise from workout Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ca12970-7d89-4aaf-a679-37bf8e60894e",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"Exercise has already been added to this workout\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10], \n    workoutReps: [1, 2] \n    restTime: 10\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1306e772-d667-491e-bfcc-16061c5c6c44",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a25fd60c-f950-48fd-9243-008718ba306c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: update workout exercise",
					"item": [
						{
							"name": "update workout exercise with correct params from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec29cf47-06d5-4619-84ab-f57e529e5cf0",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateWorkoutExercise\": {",
											"                \"workoutExercise\": {",
											"                    \"workoutId\": \"4\",",
											"                    \"exerciseId\": \"1\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"                    \"restTime\": 2,",
											"                    \"exercise\": {",
											"                        \"name\": \"bicep curls\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10, 10], \n    workoutReps: [1, 2, 3] \n    restTime: 2\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "update workout exercise mismatched weights and reps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c09b5045-5ef2-4f45-adf7-e572dfb08f32",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"BAD_REQUEST_ERROR\";",
											"    var expected_msg = \"Number of weights needs to be the same as the number of reps\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10, 10, 11], \n    workoutReps: [1, 2] \n    restTime: 2\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "update non-existant workout exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e45c54d1-6427-442c-9b3c-3381db85dbd9",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkoutExercise(\n    workoutId: 0, \n    exerciseId: 1, \n    workoutWeights : [10], \n    workoutReps: [1] \n    restTime: 2\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: remove workout exercise from workout",
					"item": [
						{
							"name": "delete workout exercise from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae7d5047-94fb-4520-9242-dbb05d81a66b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteWorkoutExercise\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1\n  ) {\n    ok\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete non-existant workout exercise from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbdb7b0b-b927-42bd-88ee-627a2d860cfd",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1\n  ) {\n    ok\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "weight",
			"item": [
				{
					"name": "1. Queries: weight, weights",
					"item": [
						{
							"name": "weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8598c18e-26ff-4f47-bb54-73c9b2ec0103",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"weight\": {",
											"                \"weight\": 104.5,",
											"                \"measuredAt\": \"2020-01-20T12:00:00+00:00\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    weight(measuredAt: \"2020-01-20\") {\n        weight\n        measuredAt\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "weights",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec28d628-5a48-4b29-8366-3927de8ea349",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"weights\": [",
											"                {",
											"                    \"weight\": 104.5,",
											"                    \"measuredAt\": \"2020-01-20T12:00:00+00:00\"",
											"                },",
											"                {",
											"                    \"weight\": 102.0,",
											"                    \"measuredAt\": \"2020-01-19T12:00:00+00:00\"",
											"                },",
											"                {",
											"                    \"weight\": 101.5,",
											"                    \"measuredAt\": \"2020-01-18T12:00:00+00:00\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    weights {\n        weight\n        measuredAt\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: add weight",
					"item": [
						{
							"name": "add weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6dd9fff4-de48-4bbf-b76f-51518077b17b",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"addWeight\": {",
											"                \"weight\": {",
											"                    \"weight\": 999.99",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    addWeight(weight: 999.99) {\n        weight {\n            weight\n        }\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: update weight",
					"item": [
						{
							"name": "update existing weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0de8f1a6-41f0-465d-b1e8-f131e84751f3",
										"exec": [
											"",
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateWeight\": {",
											"                \"weight\": {",
											"                    \"weight\": 999.99,",
											"                    \"measuredAt\": \"2020-01-20T12:00:00+00:00\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateWeight(weight: 999.99, measuredAt: \"2020-01-20\") {\n        weight {\n            weight\n            measuredAt\n        }\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "update non-existent weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63cbad7c-ca03-4f9b-98ff-2f41a5501a14",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Weight not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateWeight(weight: 999.99, measuredAt: \"2020-01-02\") {\n        weight {\n            weight\n            measuredAt\n        }\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: delete weight",
					"item": [
						{
							"name": "delete existing weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46797a90-b0a5-4700-9252-c2258ec1288b",
										"exec": [
											"",
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteWeight\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteWeight(measuredAt: \"2020-01-20\") {\n        ok\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete non-existing weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05ffa972-7fc9-46d1-b76f-aa4ffa4e8edd",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Weight not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteWeight(measuredAt: \"2020-01-20\") {\n        ok\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "062bec3c-7fe4-40c4-aa59-cad5210fbce4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4bc8e1a5-5261-44a1-942a-f9c0387e54db",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}