{
	"info": {
		"_postman_id": "1bd357fa-7a3e-462a-ab5c-27521d88006c",
		"name": "stronk",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "1. Mutation: createUser",
					"item": [
						{
							"name": "Create without currentProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1850764-1b08-41f6-a2ee-8cbd4876aff4",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"test_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    console.log(result);",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4074a62f-1647-4a18-b129-d6a038f8259b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"Username, email or ID is not unique.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74c547c0-d557-4e11-bd7e-a25ab677a668",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ef94a85-b432-4466-8f79-b536d8bb510b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"username\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Bad Request - Missing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "693f52d2-a679-434b-ad8e-36e256301109",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createUser\\\" argument \\\"email\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Queries: user, users",
					"item": [
						{
							"name": "users query (full nested)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2bb913b-140d-4361-add2-3567b8fc0c6b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"users\": [",
											"                {",
											"                    \"name\": \"test name\",",
											"                    \"username\": \"test username\"",
											"                },",
											"                {",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"mxwvy\",",
											"                },",
											"                {",
											"                    \"name\": \"jason cheung\",",
											"                    \"username\": \"kakit\",",
											"                },",
											"                {",
											"                    \"name\": \"richard wei\",",
											"                    \"username\": \"chengchu\",",
											"                },",
											"                {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"test_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n\tusers {\n\t\t... on ProtectedUser{\n          username\n    \t\t\tname\n    }\n    ... on User {\n\t\t\tid\n      name\n      username\n      email\n      currentProgram {\n        id\n      }\n    }\n  }     \n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "354"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 06:51:49 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"users\": [\n            {\n                \"id\": \"user_id_1\",\n                \"name\": \"max b wavy\",\n                \"username\": \"mxwvy\",\n                \"email\": \"max.wavy@gmail.com\",\n                \"currentProgram\": null\n            },\n            {\n                \"id\": \"user_id_2\",\n                \"name\": \"jason cheung\",\n                \"username\": \"kakit\",\n                \"email\": \"ka.kit@gmail.com\",\n                \"currentProgram\": null\n            },\n            {\n                \"id\": \"user_id_3\",\n                \"name\": \"richard wei\",\n                \"username\": \"chengchu\",\n                \"email\": \"richard.wei@gmail.com\",\n                \"currentProgram\": null\n            }\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "user query by username (full nested)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2466b74-0c13-44b3-8609-125ceb5a3a8a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"name\": \"test_name\",",
											"                \"username\": \"test_username\",",
											"                \"id\": \"test_id\",",
											"                \"email\": \"test_email\",",
											"                \"currentProgram\": null",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "496b4fd0-bf4c-4748-baf2-43c6630a1d57",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n\tuser(username: \"test_username\") {\n    name\n    username\n\t\t... on User {\n            id\n\t\t\temail\n            currentProgram {\n                id\n                name\n                description\n                duration\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query by username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d95a2723-d7ce-4666-b145-46428c806342",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"user\": {",
											"                \"name\": \"richard wei\",",
											"                \"username\": \"chengchu\",",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(username: \"chengchu\") {\n        name\n        username\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "user query - NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a0e7a83-28d1-44d2-94cc-d561198fffed",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"User not found.\";",
											"    var expected_code = \"NOT_FOUND_ERROR\"",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    user(username: \"username_10\") {\n        name\n        username\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateUser",
					"item": [
						{
							"name": "Update non-existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6175449d-f369-49ee-8446-9e3566947192",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"User not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(username: \"user_id_x\", name: \"new_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5330b85e-6c81-4fc5-861e-abae56e71806",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"UNAUTHORIZED_ERROR\";",
											"    var expected_msg = \"User does not have access to this resource or action.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(username: \"mxwvy\", name: \"new_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a2fe2da-e7af-4821-aeb5-e4d8b561064e",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(username: \"test_username\", email: \"new_email\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3ef650c-2e2a-4dc2-a51a-de9385c3343e",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"new_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(username: \"test_username\", name: \"new_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update currentProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1de1ab1d-2dc2-4962-8a9c-a44aa61525ad",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"new_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"new_email\",",
											"                    \"currentProgram\": {",
											"                        \"name\": \"Jason's Program\"",
											"                    }",
											"                }",
											"            }",
											"        }        ",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"test_id\", currentProgram: 2) {\n        user {\n            id\n            currentProgram {\n                name\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update currentProgram unsubscribe",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "512956b8-722b-4f83-9f40-ae172561b5f1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }        ",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"test_id\", currentProgram: -1) {\n        user {\n            id\n            currentProgram {\n                name\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update currentProgram non-existent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0c08525-f865-4824-a55a-409413351d37",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Program not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateUser(id: \"test_id\", currentProgram: -2) {\n        user {\n            id\n            currentProgram {\n                name\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteUser",
					"item": [
						{
							"name": "Delete user that exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a997142a-d991-4ac8-b646-873e31244312",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteUser\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteUser(username: \"test_username\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "929d55fd-2b0a-45f5-8bd8-9a21ea1fc97f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"User not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteUser(username: \"test_id_x\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "967b3943-2357-43cf-b610-7b4fa52518e9",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"UNAUTHORIZED_ERROR\";",
											"    var expected_msg = \"User does not have access to this resource or action.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteUser(username: \"kakit\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "clean up",
					"item": [
						{
							"name": "Create without currentProgram Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74ba3cb3-d13f-4877-98fe-187ff1874573",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createUser\": {",
											"                \"user\": {",
											"                    \"id\": \"test_id\",",
											"                    \"name\": \"test_name\",",
											"                    \"username\": \"test_username\",",
											"                    \"email\": \"test_email\",",
											"                    \"currentProgram\": null",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createUser(email: \"test_email\", username: \"test_username\", name: \"test_name\") {\n        user {\n            id\n            name\n            username\n            email\n            currentProgram {\n                id\n            }\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "correct response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql"
										},
										"url": {
											"raw": "{{base_url}}/graphql",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "Server",
											"value": "Werkzeug/0.15.4 Python/3.7.0"
										},
										{
											"key": "Date",
											"value": "Thu, 07 May 2020 07:04:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": \"user_id_1\",\n            \"name\": \"max b wavy\",\n            \"username\": \"mxwvy\",\n            \"email\": \"max.wavy@gmail.com\",\n            \"currentProgram\": null\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Tests for graphQL queries and mutations for users.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e186ed3c-9ad2-437b-9a85-878d6963d578",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fefd37cd-c60e-4e2a-bdf7-0a22258a9fd7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "exercise",
			"item": [
				{
					"name": "1. Queries: exercise, exercises",
					"item": [
						{
							"name": "exercises query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48af2b4f-dd42-4e32-b971-8848065606f4",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercises\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"bicep curls\",",
											"                    \"description\": \"bicep curls description\"",
											"                },",
											"                {",
											"                    \"id\": \"2\",",
											"                    \"name\": \"squats\",",
											"                    \"description\": \"squats description\"",
											"                },",
											"                {",
											"                    \"id\": \"3\",",
											"                    \"name\": \"pullups\",",
											"                    \"description\": \"pullups curls description\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercises {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a19121c8-be67-4e57-9202-c3fdedfee2d7",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": {",
											"                \"id\": \"2\",",
											"                \"name\": \"squats\",",
											"                \"description\": \"squats description\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(id: 2) {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54519fb7-d32a-4aaf-a2be-e4d103fd0e6a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": {",
											"                \"id\": \"2\",",
											"                \"name\": \"squats\",",
											"                \"description\": \"squats description\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(name: \"squats\") {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query by desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43a58f37-4765-4717-8b44-e587b9d35ed9",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": {",
											"                \"id\": \"2\",",
											"                \"name\": \"squats\",",
											"                \"description\": \"squats description\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(desc: \"squats description\") {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "exercise query - NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d59f297-9e64-47f3-9849-ab603f9f50e1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"exercise\": null",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    exercise(id: -1) {\n        id\n        name\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createExercise",
					"item": [
						{
							"name": "Create exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2109fed-ea98-4850-9a62-3fcb2c1c389f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createExercise\": {",
											"                \"exercise\": {",
											"                    \"name\": \"Ex1\",",
											"                    \"description\": \"ex1 desc\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"ex1\", desc: \"ex1 desc\") {\n        exercise {\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b129b638-09b6-4c58-8b78-68a46302a59f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"Name already used by another exercise\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"ex1\", desc: \"newest exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec9948e9-8b27-4994-ade0-fe90bb4e4cdb",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createExercise\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(desc: \"newest exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ee4509c-ae53-45dd-b7eb-87a1b21d5c87",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createExercise\\\" argument \\\"desc\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4884741-b879-48d3-b711-8c79dc71a9d6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createExercise(name: \"new exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateExercise",
					"item": [
						{
							"name": "Update non-existent exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "739bed35-4638-42e8-a688-5566f2259409",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 0) {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d471c1f1-48b9-4f71-9360-823b6c454855",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateExercise\": {",
											"                \"exercise\": {",
											"                    \"id\": \"4\",",
											"                    \"name\": \"New Exercise\",",
											"                    \"description\": \"ex1 desc\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 4, name: \"new exercise\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "478ff4c4-6a9b-41cf-915f-24ed0bc9acff",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateExercise\": {",
											"                \"exercise\": {",
											"                    \"id\": \"4\",",
											"                    \"name\": \"New Exercise\",",
											"                    \"description\": \"new description\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 4, desc: \"new description\") {\n        exercise {\n            id\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update author",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ec4ccbc-912b-44de-8746-a16a86b3635c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateExercise\": {",
											"                \"exercise\": {",
											"                    \"id\": \"4\",",
											"                    \"name\": \"New Exercise\",",
											"                    \"author\": \"test_id\",",
											"                    \"description\": \"new description\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateExercise(id: 4, author: \"test_username\") {\n        exercise {\n            id\n            name\n            author\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteExercise",
					"item": [
						{
							"name": "Delete existing unused exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "968dd20c-4ca8-421e-a22c-0a773d1c92ca",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteExercise\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteExercise(id: 4) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73931261-b868-4df1-aadb-42a39f3fe9f3",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteExercise(id: 0) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "workout",
			"item": [
				{
					"name": "1. Queries: workout, workouts",
					"item": [
						{
							"name": "program workouts query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c87b22a4-c05b-4ae3-83ce-73b68895b53a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workouts\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"name\": \"workout 1\",",
											"                    \"description\": \"workout 1 description\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workouts(programId: 1) {\n    id, name, description\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "workout query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00bcd75f-1d3a-4618-9b98-e2a2bd73250b",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workout\": {",
											"                \"id\": \"1\",",
											"                \"name\": \"workout 1\",",
											"                \"description\": \"workout 1 description\"",
											"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workout(id: 1) {\n    id, name, description\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createWorkout",
					"item": [
						{
							"name": "create workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15d38208-1d87-41a8-a60e-e45a024b4766",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test workout\",",
											"                    \"description\": \"blah blah blah\",",
											"                    \"projectedTime\": 100,",
											"                    \"scheduledTime\": \"2099-01-20T12:00:00+00:00\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test workout\",\n    programId: 1,\n    description: \"blah blah blah\",\n    projectedTime: 100,\n    scheduledTime: \"2099-01-20T12:00:00+00:00\"\n  ) {\n    workout {\n        name\n        description\n        projectedTime\n        scheduledTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create workout w/o description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19c17052-5ade-4b6a-abcf-639a0ce38cf2",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test workout\",",
											"                    \"description\": \"\",",
											"                    \"projectedTime\": 100,",
											"                    \"scheduledTime\": \"2099-01-20T12:00:00+00:00\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test workout\",\n    programId: 1,\n    projectedTime: 100,\n    scheduledTime: \"2099-01-20T12:00:00+00:00\"\n  ) {\n    workout {\n      name\n      description\n      projectedTime\n      scheduledTime\n    }\n  }\n}\n",
										"variables": "{\n\t\"name\": \"test program\",\n\t\"programId\": 1,\n\t\"projectedTime\": 100\n}"
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create workout w/o projected time",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b5c8ccd-1331-4588-8d5f-3703cd39d60e",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createWorkout\": {",
											"                \"workout\": {",
											"                    \"name\": \"test workout\",",
											"                    \"description\": \"blah blah blah\",",
											"                    \"projectedTime\": 0,",
											"                    \"scheduledTime\": \"2099-01-20T12:00:00+00:00\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test workout\",\n    programId: 1,\n    description: \"blah blah blah\",\n    scheduledTime: \"2099-01-20T12:00:00+00:00\"\n) {\n    workout {\n      name\n      description\n      projectedTime\n      scheduledTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create workout scheduled for invalid time",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f83478c3-ffbc-4180-93c7-f261ae126ebf",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"BAD_REQUEST_ERROR\";",
											"    var expected_msg = \"Workout cannot be scheduled in the past.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWorkout(\n    name: \"test workout\",\n    programId: 1,\n    description: \"blah blah blah\",\n    projectedTime: 100,\n    scheduledTime: \"2000-01-20T12:00:00+00:00\"\n  ) {\n    workout {\n        name\n        description\n        projectedTime\n        scheduledTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateWorkout",
					"item": [
						{
							"name": "Update workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02fc8a7f-6cdf-4f8c-914d-66b19527541e",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateWorkout\": {",
											"                \"workout\": {",
											"                    \"id\": \"6\",",
											"                    \"name\": \"new workout name\",",
											"                    \"description\": \"new desc\",",
											"                    \"projectedTime\": 200",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkout(id: 6, name: \"new workout name\", description: \"new desc\", projectedTime: 200){\n    workout {\n      id,\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non-existent workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "942560d1-366a-4ef5-b414-0904d7911c9a",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkout(id: -1, name: \"new workout name\", description: \"new desc\", projectedTime: 200){\n    workout {\n      id,\n      name\n      description\n      projectedTime\n    }\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteWorkout",
					"item": [
						{
							"name": "Delete workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d602a33-3484-4fac-bbfb-4939e5831847",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteWorkout\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkout(id: 6) {\n    ok\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "deaf4f4c-5614-4a79-b457-16c81d264a05",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkout(id: -1) {\n    ok\n  }\n}\n",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e9b1ad30-49c7-4245-8d38-575f380e273a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8e1c58f1-a41d-4a42-ac75-ddcb2dbb7d2b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "program",
			"item": [
				{
					"name": "1. Queries: program, programs",
					"item": [
						{
							"name": "programs query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ceba8001-c122-47e1-a252-f8d14c881ccb",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programs\": [",
											"                {",
											"                    \"id\": \"1\",",
											"                    \"author\": {",
											"                        \"name\": \"max b wavy\",",
											"                        \"username\": \"mxwvy\"",
											"                    },",
											"                    \"name\": \"max's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 3\"",
											"                },",
											"                {",
											"                    \"id\": \"2\",",
											"                    \"author\": {",
											"                        \"name\": \"jason cheung\",",
											"                        \"username\": \"kakit\"",
											"                    },",
											"                    \"name\": \"jason's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 2\"",
											"                },",
											"                {",
											"                    \"id\": \"3\",",
											"                    \"author\": {",
											"                        \"name\": \"richard wei\",",
											"                        \"username\": \"chengchu\"",
											"                    },",
											"                    \"name\": \"richard's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 1\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programs {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "programs query by author",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5361c6d-ff84-4f91-ac2a-8fef09706964",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programs\": [",
											"                {",
											"                    \"id\": \"3\",",
											"                    \"author\": {",
											"                        \"name\": \"richard wei\",",
											"                        \"username\": \"chengchu\"",
											"                    },",
											"                    \"name\": \"richard's program\",",
											"                    \"duration\": 10,",
											"                    \"description\": \"dummy description 1\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programs(author: \"chengchu\") {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program query by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "367342ac-311a-402f-bf82-83a5931346ce",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"program\": {",
											"                \"id\": \"1\",",
											"                \"author\": {",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"mxwvy\"",
											"                },",
											"                \"name\": \"max's program\",",
											"                \"duration\": 10,",
											"                \"description\": \"dummy description 3\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    program(name: \"max's program\") {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program query by author",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "017ed84f-0845-4951-a69a-cbf07b7fa543",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"program\": {",
											"                \"id\": \"2\",",
											"                \"author\": {",
											"                    \"name\": \"jason cheung\",",
											"                    \"username\": \"kakit\"",
											"                },",
											"                \"name\": \"jason's program\",",
											"                \"duration\": 10,",
											"                \"description\": \"dummy description 2\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    program(author: \"user_id_2\") {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program query by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa67966b-9db9-4650-a19a-e9cc3a222d3f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"program\": {",
											"                \"id\": \"1\",",
											"                \"author\": {",
											"                    \"name\": \"max b wavy\",",
											"                    \"username\": \"mxwvy\"",
											"                },",
											"                \"name\": \"max's program\",",
											"                \"duration\": 10,",
											"                \"description\": \"dummy description 3\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    program(name: \"max's program\") {\n        id\n        author {\n            name\n            username\n        }\n        name\n        duration\n        description\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: createProgram",
					"item": [
						{
							"name": "Create program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b67e425-4a42-424b-9256-67fed211fde3",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createProgram\": {",
											"                \"program\": {",
											"                    \"name\": \"New Program\",",
											"                    \"author\": {",
											"                        \"name\": \"test_name\"",
											"                    },",
											"                    \"duration\": 10,",
											"                    \"description\": \"newest program\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", duration: 10, desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6868411d-8113-4eb2-bd0b-5507ba2d5ea6",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgram\\\" argument \\\"name\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(author: \"user_id_1\", duration: 10, desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing author",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03f583e-b4e3-487c-8a26-d341824ea553",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgram\\\" argument \\\"author\\\" of type \\\"String!\\\" is required but not provided.\"",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", duration: 10, desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6200af3c-7d29-4d0e-9027-a55c1e4a61aa",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgram\\\" argument \\\"duration\\\" of type \\\"Int!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", desc: \"newest program\") {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9fa39c3e-585d-4c80-8fdd-dcbfa59cb3b1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgram\\\" argument \\\"desc\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProgram(name:\"new program\", duration: 10) {\n    program {\n      name\n      author {\n        name\n      }\n      duration\n      description\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: updateProgram",
					"item": [
						{
							"name": "Update program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "554c9fb1-0405-428b-9444-3b175dd2a46f",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateProgram\": {",
											"                \"program\": {",
											"                    \"name\": \"New Program 1\",",
											"                    \"author\": {",
											"                        \"name\": \"test_name\"",
											"                    },",
											"                    \"duration\": 11,",
											"                    \"description\": \"newest program 1\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateProgram(id: 5, name: \"new program 1\", duration: 11, desc: \"newest program 1\") {\n        program {\n            name\n            author {\n                name\n            }\n            duration\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update another user's program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "341b1419-4699-4d09-bc20-2b76afd532ba",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"UNAUTHORIZED_ERROR\";",
											"    var expected_msg = \"User does not have access to this resource or action.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateProgram(id: 2, name: \"new program 1\", author: \"user_id_2\", duration: 11, desc: \"newest program 1\") {\n        program {\n            name\n            author {\n                name\n            }\n            duration\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non-existent program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "895a85e9-4872-4bf6-8548-b4d8d624a84c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Program not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateProgram(id: 10, name: \"new program 1\", author: \"user_id_2\", duration: 11, desc: \"newest program 1\") {\n        program {\n            name\n            author {\n                name\n            }\n            duration\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: deleteProgram",
					"item": [
						{
							"name": "Delete program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4241b038-fb59-46c7-b942-419c5d49ec3c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteProgram\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgram(id: 5) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existent program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3900993e-3d19-46e6-af0e-74a75930f5b1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Program not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgram(id: 4) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "program review",
			"item": [
				{
					"name": "1. Mutation: createProgramReview",
					"item": [
						{
							"name": "Create program review",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "706b6592-996e-48a3-bae8-223e75b6037e",
										"exec": [
											"",
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"createProgramReview\": {",
											"                \"programReview\": {",
											"                    \"program\": {",
											"                        \"id\": \"1\"",
											"                    },",
											"                    \"comments\": \"test comment\",",
											"                    \"rating\": 5",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, rating: 5, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "711be6d8-3c4c-4c7d-a059-58c400721198",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"User already reviewed this program\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, rating: 5, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bad Request - Missing comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a9e7f17-84a5-4210-9552-2b40958de296",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgramReview\\\" argument \\\"comments\\\" of type \\\"String!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, rating: 5) {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bad Request - Missing rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07efed61-dea3-4397-a560-9da170862ed1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgramReview\\\" argument \\\"rating\\\" of type \\\"Int!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(programId: 1, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bad Request - Missing programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e043ff02-44cf-41e6-855d-fbe68ac90893",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = \"Field \\\"createProgramReview\\\" argument \\\"programId\\\" of type \\\"Int!\\\" is required but not provided.\";",
											"    pm.expect(result.errors[0].message).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createProgramReview(rating: 5, comments: \"test comment\") {\n        programReview {\n            program {\n                id\n            }\n            comments\n            rating\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Queries: program review, program reviews",
					"item": [
						{
							"name": "program reviews query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88e731ba-4fbd-48db-9f9c-fbc7b8c65f8b",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programReviews\": [",
											"                {",
											"                    \"comments\": \"test comment\",",
											"                    \"rating\": 5,",
											"                    \"program\": {",
											"                        \"name\": \"max's program\",",
											"                        \"description\": \"dummy description 3\"",
											"                    }",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programReviews {\n        comments\n        rating\n        program {\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "program review query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8a13292-8441-493c-8c52-1715a91852bc",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"programReview\": {",
											"                \"comments\": \"test comment\",",
											"                \"rating\": 5,",
											"                \"program\": {",
											"                    \"name\": \"max's program\",",
											"                    \"description\": \"dummy description 3\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    programReview(programId: 1) {\n        comments\n        rating\n        program {\n            name\n            description\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: deleteProgramReview",
					"item": [
						{
							"name": "Delete program review",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "743f4f3b-6422-4b69-b517-2afbff498623",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteProgramReview\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgramReview(programId: 1) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existant program review",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e55ff26-4a5f-4f9d-94c4-0122bfcb4286",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Review not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteProgramReview(programId: 1) {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "workout_exercise",
			"item": [
				{
					"name": "1. Queries: workoutExercise, workoutExercises",
					"item": [
						{
							"name": "workout exercises query by workout id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfb271be-3f2f-45f5-928a-33f4cb4cfedb",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workoutExercises\": [",
											"                {",
											"                    \"workoutId\": \"1\",",
											"                    \"exerciseId\": \"1\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        10,",
											"                        10,",
											"                        10",
											"                    ],",
											"                    \"restTime\": 10",
											"                },",
											"                {",
											"                    \"workoutId\": \"1\",",
											"                    \"exerciseId\": \"2\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        10,",
											"                        10,",
											"                        10",
											"                    ],",
											"                    \"restTime\": 10",
											"                },",
											"                {",
											"                    \"workoutId\": \"1\",",
											"                    \"exerciseId\": \"3\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        10,",
											"                        10,",
											"                        10",
											"                    ],",
											"                    \"restTime\": 10",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workoutExercises(workoutId: 1) {\n    workoutId, exerciseId, workoutWeights, workoutReps, restTime \n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "workout exercise query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bd945a9-a392-4746-bc62-c89a969ff000",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"workoutExercise\": {",
											"                \"workoutId\": \"1\",",
											"                \"exerciseId\": \"1\",",
											"                \"workoutWeights\": [",
											"                    10.0,",
											"                    10.0,",
											"                    10.0",
											"                ],",
											"                \"workoutReps\": [",
											"                    10,",
											"                    10,",
											"                    10",
											"                ],",
											"                \"restTime\": 10,",
											"                \"exercise\": {",
											"                    \"name\": \"bicep curls\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  workoutExercise(workoutId: 1, exerciseId: 1) {\n    workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n      name\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Mutation: add workout exercise to workout",
					"item": [
						{
							"name": "add workout exercise from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a1e37c6-f812-48a5-955a-e3b87b71f2b2",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"addWorkoutExercise\": {",
											"                \"workoutExercise\": {",
											"                    \"workoutId\": \"4\",",
											"                    \"exerciseId\": \"1\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        1,",
											"                        2",
											"                    ],",
											"                    \"restTime\": 10,",
											"                    \"exercise\": {",
											"                        \"name\": \"bicep curls\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10], \n    workoutReps: [1, 2] \n    restTime: 10\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "add duplicate workout exercise from workout Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9715853c-5078-4dcd-a64c-5c8507391e98",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"RESOURCE_CONFLICT_ERROR\";",
											"    var expected_msg = \"Exercise has already been added to this workout\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10], \n    workoutReps: [1, 2] \n    restTime: 10\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "67784ecc-fa26-4a71-a965-310512c2f66b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a6768787-989f-4b68-a4f0-c606c554c3e1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: update workout exercise",
					"item": [
						{
							"name": "update workout exercise with correct params from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88b5a260-e583-46e5-a407-989f299f3ecb",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateWorkoutExercise\": {",
											"                \"workoutExercise\": {",
											"                    \"workoutId\": \"4\",",
											"                    \"exerciseId\": \"1\",",
											"                    \"workoutWeights\": [",
											"                        10.0,",
											"                        10.0,",
											"                        10.0",
											"                    ],",
											"                    \"workoutReps\": [",
											"                        1,",
											"                        2,",
											"                        3",
											"                    ],",
											"                    \"restTime\": 2,",
											"                    \"exercise\": {",
											"                        \"name\": \"bicep curls\"",
											"                    }",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10, 10], \n    workoutReps: [1, 2, 3] \n    restTime: 2\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "update workout exercise mismatched weights and reps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e910541-a3d6-4845-9047-9361e445d836",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"BAD_REQUEST_ERROR\";",
											"    var expected_msg = \"Number of weights needs to be the same as the number of reps\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1, \n    workoutWeights : [10, 10, 10, 11], \n    workoutReps: [1, 2] \n    restTime: 2\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "update non-existant workout exercise",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c83947e2-9fd6-4807-ba4a-1482877d00c1",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWorkoutExercise(\n    workoutId: 0, \n    exerciseId: 1, \n    workoutWeights : [10], \n    workoutReps: [1] \n    restTime: 2\n  ) {\n    workoutExercise {\n      workoutId, exerciseId, workoutWeights, workoutReps, restTime, exercise {\n        name\n      }\n    }\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: remove workout exercise from workout",
					"item": [
						{
							"name": "delete workout exercise from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d40b97c1-4a25-47d5-8b5e-36fe858841a0",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteWorkoutExercise\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1\n  ) {\n    ok\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete non-existant workout exercise from workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d9eddd1-a016-44fc-9bc8-1cd9fe3c700e",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Workout exercise not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteWorkoutExercise(\n    workoutId: 4, \n    exerciseId: 1\n  ) {\n    ok\n  }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "weight",
			"item": [
				{
					"name": "1. Mutation: add weight",
					"item": [
						{
							"name": "add weight 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef751877-369e-4db4-a667-ee96e44dcafd",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"addWeight\": {",
											"                \"weight\": {",
											"                    \"weight\": 104.5",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    addWeight(weight: 104.5, measuredAt: \"2020-01-20T12:00:00+00:00\") {\n        weight {\n            weight\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "add weight 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09633d6d-7a8a-46df-9bd9-34c1d875e8fb",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"addWeight\": {",
											"                \"weight\": {",
											"                    \"weight\": 102.0",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    addWeight(weight: 102.0, measuredAt: \"2020-01-19T12:00:00+00:00\") {\n        weight {\n            weight\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "add weight 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efdc936f-1234-4e2a-bd2b-a8e8a015962f",
										"exec": [
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"addWeight\": {",
											"                \"weight\": {",
											"                    \"weight\": 101.5",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    addWeight(weight: 101.5, measuredAt: \"2020-01-18T12:00:00+00:00\") {\n        weight {\n            weight\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2. Queries: weight, weights",
					"item": [
						{
							"name": "weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59c42143-c40b-4d45-8d24-98e6001faecc",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"weight\": {",
											"                \"weight\": 104.5,",
											"                \"measuredAt\": \"2020-01-20T12:00:00+00:00\"",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    weight(measuredAt: \"2020-01-20\") {\n        weight\n        measuredAt\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "weights",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9795a5b4-e6a7-4f84-8fe1-cc77cc9a453c",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"weights\": [",
											"                {",
											"                    \"weight\": 104.5,",
											"                    \"measuredAt\": \"2020-01-20T12:00:00+00:00\"",
											"                },",
											"                {",
											"                    \"weight\": 102.0,",
											"                    \"measuredAt\": \"2020-01-19T12:00:00+00:00\"",
											"                },",
											"                {",
											"                    \"weight\": 101.5,",
											"                    \"measuredAt\": \"2020-01-18T12:00:00+00:00\"",
											"                }",
											"            ]",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    weights {\n        weight\n        measuredAt\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3. Mutation: update weight",
					"item": [
						{
							"name": "update existing weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41be1519-8016-4c4e-a73d-f3ec69a04bdc",
										"exec": [
											"",
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"updateWeight\": {",
											"                \"weight\": {",
											"                    \"weight\": 999.99,",
											"                    \"measuredAt\": \"2020-01-20T12:00:00+00:00\"",
											"                }",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateWeight(weight: 999.99, measuredAt: \"2020-01-20\") {\n        weight {\n            weight\n            measuredAt\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "update non-existent weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "069b6f3c-350d-4f94-8e78-4a6d62b435e5",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Weight not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    updateWeight(weight: 999.99, measuredAt: \"2020-01-02\") {\n        weight {\n            weight\n            measuredAt\n        }\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4. Mutation: delete weight",
					"item": [
						{
							"name": "delete existing weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aff4c478-1b41-41d9-bf80-99d35b607e87",
										"exec": [
											"",
											"",
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected = {",
											"        \"data\": {",
											"            \"deleteWeight\": {",
											"                \"ok\": true",
											"            }",
											"        }",
											"    }",
											"    pm.expect(result).to.eql(expected);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteWeight(measuredAt: \"2020-01-20\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete non-existing weight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5263d7a9-d2ae-46ec-95f0-c48db220c8d6",
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body test\", function () {",
											"    var result = pm.response.json();",
											"    var expected_code = \"NOT_FOUND_ERROR\";",
											"    var expected_msg = \"Weight not found.\";",
											"    pm.expect(result.errors[0].context.code).to.eql(expected_code);",
											"    pm.expect(result.errors[0].context.message).to.eql(expected_msg);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteWeight(measuredAt: \"2020-01-20\") {\n        ok\n    }\n}",
										"variables": ""
									},
									"options": {
										"graphql": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "463669aa-0912-4ede-a612-768e0d1acc75",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "06f76d47-d6c2-49f6-ae7d-d97a39edb0ee",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}